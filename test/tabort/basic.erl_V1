%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%% Created :
%%% Node end point  
%%% Creates and deletes Pods
%%% 
%%% API-kube: Interface 
%%% Pod consits beams from all services, app and app and sup erl.
%%% The setup of envs is
%%% -------------------------------------------------------------------
-module(basic).   
 
-export([start/0]).
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
-define(HostNames,["c100","c200","c202"]).
%-define(HostNames,["c100"]).
-define(C1,[{"c1_node1","c1_node1.dir","c1"},
	     {"c1_node2","c1_node2.dir","c1"},
	     {"c1_node3","c1_node3.dir","c1"},
	     {"c1_node4","c1_node4.dir","c1"}]).
-define(C2,[{"c2_node1","c2_node1.dir","c2"},
	     {"c2_node2","c2_node2.dir","c2"},
	     {"c2_node3","c2_node3.dir","c2"},
	     {"c2_node4","c2_node4.dir","c2"}]).
-define(C3,[{"c3_node1","c3_node1.dir","c3"},
	     {"c3_node2","c3_node2.dir","c3"},
	     {"c3_node3","c3_node3.dir","c3"},
	     {"c3_node4","c3_node4.dir","c3"}]).
%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
start()->
    
    
    ok=start_node_etcd(),
    io:format("sd:all() ~p~n",[sd:all()]),

    ok=db_host_spec:init_table(),
   "192.168.1.202"=config:host_local_ip("c202"),
    io:format("db_host_spec:read_all() ~p~n",[db_host_spec:read_all()]),

    ok=db_application_spec:init_table(),
    "https://github.com/joq62/nodelog.git"=config:application_gitpath("nodelog.spec"),
    io:format("db_application_spec:read_all() ~p~n",[db_application_spec:read_all()]),

    ok=db_deployment_info:init_table(),
    "calculator"=config:deployment_name("calculator.depl"),
    io:format("db_deployment_info:read_all() ~p~n",[db_deployment_info:read_all()]),

    ok=db_deployments:init_table(),
    "cluster1_cookie"=config:deployment_spec_cookie("cluster1.depl_spec"),
    io:format("db_deployments:read_all() ~p~n",[db_deployments:read_all()]),


   % init:stop(),
    ok.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
check_application_spec()->
  
    ok.
%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
check_host_spec()->
    HostName="c202",
    "192.168.1.202"=config:host_local_ip("c202"),
    ok.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
init_host_spec()->
    ok=db_host_spec:create_table(),
    AllHostNames=config:host_all_hostnames(),
    init_host_spec(AllHostNames).
    
init_host_spec([])->
    ok;
init_host_spec([HostName|T])->
    {atomic,ok}=db_host_spec:create(HostName,
				    config:host_local_ip(HostName),
				    config:host_public_ip(HostName),
				    config:host_ssh_port(HostName),
				    config:host_uid(HostName),
				    config:host_passwd(HostName),
				    config:host_application_config(HostName)
				   ),
    
    init_host_spec(T).


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
start_node_etcd()->
    ok=sd:appl_start([]),
    pong=sd:ping(),
    ok=config:appl_start([]),
    pong=config:ping(),
    ok=etcd:appl_start([]),
    pong=etcd:ping(), 
    ok=etcd:dynamic_db_init([]),
    ok.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
setup()->
    ok=application:start(common),
    ok=application:start(sd),
    ok=application:start(nodelog),
    OamTestLogsDir="test_logs",
    []=os:cmd("rm -rf "++OamTestLogsDir),
    ok=file:make_dir(OamTestLogsDir),
    LogFile=filename:join(OamTestLogsDir,"log"),
    ok=application:start(config),
    
    ok.
    
    

